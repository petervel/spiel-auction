// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique
  bggUsername String
  accessLevel AccessLevel @default(NORMAL)
  createdAt   DateTime    @default(now())
}

model Fair {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  status      FairStatus @default(ACTIVE)
  geeklistId  Int
  lastUpdated Int        @default(0)
  lastResult  JobResult  @default(NONE)
  startedAt   Int        @default(0)
  list        List?      @relation(fields: [listId], references: [id])
  listId      Int?       @unique
  latestFile  String?
}

model List {
  id            Int           @unique
  fair          Fair?
  title         String
  username      String
  postDate      DateTime
  postTimestamp Int
  editDate      DateTime
  editTimestamp Int
  thumbs        Int
  itemCount     Int
  description   String        @db.Text
  tosUrl        String
  comments      ListComment[]
  items         Item[]

  lastSeen Int     @default(0)
  deleted  Boolean @default(false)
}

model Item {
  id     Int  @unique
  list   List @relation(fields: [listId], references: [id])
  listId Int

  objectType    String
  objectSubtype String
  objectId      Int
  objectName    String @db.Text

  username      String
  postDate      DateTime
  postTimestamp Int
  editDate      DateTime
  editTimestamp Int
  thumbs        Int
  imageId       Int

  body String @db.Text

  comments ItemComment[]

  // Derived data
  language  String? @db.Text
  condition String? @db.Text

  startingBid Int?
  softReserve Int?
  hardReserve Int?
  binPrice    Int?

  auctionEnd     String? @db.Text
  auctionEndDate String? @db.Text

  hasBids       Boolean  @default(false)
  isSold        Boolean  @default(false)
  isEnded       Boolean  @default(false)
  itemType      ItemType @default(GAME)
  currentBid    Int?
  highestBidder String?

  lastSeen Int     @default(0)
  deleted  Boolean @default(false)

  @@index([listId, deleted, id])
  @@index([listId, deleted, username])
  @@index([listId, deleted, highestBidder])
  @@index([deleted])
}

model ListComment {
  list          List     @relation(fields: [listId], references: [id])
  listId        Int
  username      String
  date          String
  postDate      DateTime
  postTimestamp Int
  editDate      DateTime
  editTimestamp Int
  thumbs        Int      @default(0)
  text          String   @db.Text

  lastSeen Int     @default(0)
  deleted  Boolean @default(false)

  @@unique([listId, username, postTimestamp])
}

model ItemComment {
  listId        Int
  item          Item     @relation(fields: [itemId], references: [id])
  itemId        Int
  username      String
  date          String
  postDate      DateTime
  postTimestamp Int
  editDate      DateTime
  editTimestamp Int
  thumbs        Int      @default(0)
  text          String   @db.Text
  isBin         Boolean  @default(false)
  bid           Int?
  oldBid        Int?

  lastSeen Int     @default(0)
  deleted  Boolean @default(false)

  @@unique([itemId, username, postTimestamp])
  @@index([listId])
  @@index([deleted])
  @@index([username, deleted])
}

enum FairStatus {
  ACTIVE
  ARCHIVED
}

enum JobResult {
  NONE
  FAILURE
  SUCCESS
  RUNNING
}

enum ItemType {
  GAME
  PROMO
  OTHER
}

enum AccessLevel {
  ADMIN
  MODERATOR
  NORMAL
}
