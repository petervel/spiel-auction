services:
  db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_LOG_BIN: 0
    volumes: 
      - ./data:/var/lib/mysql
      - ./my.cnf:/etc/mysql/conf.d/my.cnf
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--silent"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - internal
    restart: unless-stopped

  backend:
    build: ./backend
    environment:
      DATABASE_URL: mysql://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}
      ADMIN_PASSWORD: ${SITE_ADMIN_PASSWORD}
      ENVIRONMENT_MODE: ${ENVIRONMENT_MODE}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PAGE_SIZE: ${PAGE_SIZE}
      DEFAULT_GEEKLIST_ID: ${DEFAULT_GEEKLIST_ID}
    expose:
      - "3000"
    ports: # temp for dev
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/health"]
      interval: 5s
      timeout: 30s
      retries: 5
    volumes:
      - xml-data:/app/xml-data
    networks:
      - internal
      - default
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    environment:
      VITE_API_BASE_URL: http://backend:3000/api
      VITE_AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      VITE_AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      VITE_AUTH0_AUDIENCE: ${AUTH0_AUDIENCE}
      VITE_DEFAULT_GEEKLIST_ID: ${DEFAULT_GEEKLIST_ID}
    volumes:
      - frontend-build:/usr/share/nginx/html  # Share the build output with the Nginx container
    depends_on:
      backend:
        condition: service_healthy
    expose:
      - "80"
    networks:
      - internal
      - default
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - frontend-build:/usr/share/nginx/html  # Mount the shared volume
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
    networks:
      - internal
      - default
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  xml-fetcher:
    build: ./xml-fetcher
    volumes:
      - xml-data:/app/data
    networks:
      - internal
    restart: unless-stopped
    environment:
      - DEFAULT_GEEKLIST_ID=${DEFAULT_GEEKLIST_ID}

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    restart: unless-stopped

networks:
  internal:
    driver: bridge

volumes:
  xml-data:
  frontend-build:
